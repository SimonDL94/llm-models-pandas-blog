{
    "prompt": "can you give me fully working python code to do the following with the Python pandas library:can you give me fully working python code to do the following with the Python pandas library: Create a function to perform stratified sampling on a DataFrame based on a categorical column.",
    "output": "Certainly! Here's a fully working Python code that defines a function to perform stratified sampling on a DataFrame based on a categorical column using the pandas library:\n\n```python\nimport pandas as pd\n\ndef stratified_sample(df, column, n_samples):\n    \"\"\"\n    Perform stratified sampling on a DataFrame based on a categorical column.\n    \n    Parameters:\n    - df: The input DataFrame.\n    - column: The name of the categorical column to stratify by.\n    - n_samples: The number of samples to take from each stratum.\n    \n    Returns:\n    - A DataFrame containing the stratified sample.\n    \"\"\"\n    # Group the DataFrame by the specified column\n    grouped = df.groupby(column)\n    \n    # Initialize an empty list to store the sampled rows\n    sampled_rows = []\n    \n    # Iterate over each group (stratum)\n    for _, group in grouped:\n        # Check if the group has enough rows for sampling\n        if len(group) >= n_samples:\n            # Randomly sample n_samples rows from the group\n            sampled_group = group.sample(n=n_samples)\n        else:\n            # If the group has fewer rows than n_samples, take all rows\n            sampled_group = group\n        \n        # Append the sampled rows to the list\n        sampled_rows.append(sampled_group)\n    \n    # Concatenate the sampled rows into a new DataFrame\n    stratified_df = pd.concat(sampled_rows)\n    \n    return stratified_df\n```\n\nTo use this function, you can call it with your DataFrame, the name of the categorical column to stratify by, and the desired number of samples per stratum. Here's an example usage:\n\n```python\n# Create a sample DataFrame\ndata = {\n    'Category': ['A', 'A', 'A', 'B', 'B', 'C', 'C', 'C', 'C', 'D'],\n    'Value': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n}\ndf = pd.DataFrame(data)\n\n# Perform stratified sampling\nstratified_sample_df = stratified_sample(df, 'Category', n_samples=2)\n\n# Print the stratified sample\nprint(stratified_sample_df)\n```\n\nOutput:\n```\n  Category  Value\n2        A      3\n0        A      1\n4        B      5\n3        B      4\n7        C      8\n6        C      7\n9        D     10\n```\n\nIn this example, the `stratified_sample` function is called with the DataFrame `df`, the categorical column `'Category'`, and `n_samples=2`. The function groups the DataFrame by the `'Category'` column and randomly samples 2 rows from each stratum (category). If a stratum has fewer than 2 rows, all rows from that stratum are included in the sample.\n\nThe resulting stratified sample is stored in the `stratified_sample_df` DataFrame, which contains 2 rows from each category (A, B, C) and the single row from category D.\n\nNote that the order of the rows in the output may vary due to the random sampling within each stratum."
}