{
    "prompt": "can you give me fully working python code to do the following with the Python pandas library:can you give me fully working python code to do the following with the Python pandas library: Implement a function to fill missing values in a DataFrame based on the values in neighboring rows.",
    "output": "Certainly! Here's a fully working Python code that implements a function to fill missing values in a DataFrame based on the values in neighboring rows using the pandas library:\n\n```python\nimport pandas as pd\nimport numpy as np\n\ndef fill_missing_values(df, method='mean', window=1):\n    \"\"\"\n    Fill missing values in a DataFrame based on the values in neighboring rows.\n\n    Parameters:\n    - df: The input DataFrame\n    - method: The method used to fill missing values ('mean', 'median', 'mode', or 'ffill')\n    - window: The number of neighboring rows to consider (applicable only for 'mean', 'median', and 'mode')\n\n    Returns:\n    - The DataFrame with missing values filled\n    \"\"\"\n    if method == 'mean':\n        return df.rolling(window=window, min_periods=1, center=True).mean().fillna(method='ffill').fillna(method='bfill')\n    elif method == 'median':\n        return df.rolling(window=window, min_periods=1, center=True).median().fillna(method='ffill').fillna(method='bfill')\n    elif method == 'mode':\n        return df.rolling(window=window, min_periods=1, center=True).apply(lambda x: x.mode()[0] if not x.mode().empty else np.nan).fillna(method='ffill').fillna(method='bfill')\n    elif method == 'ffill':\n        return df.fillna(method='ffill')\n    else:\n        raise ValueError(\"Invalid method. Choose from 'mean', 'median', 'mode', or 'ffill'.\")\n\n# Example usage\ndata = {\n    'A': [1, 2, np.nan, 4, 5],\n    'B': [10, np.nan, 12, 13, 14],\n    'C': [20, 21, 22, np.nan, 24]\n}\n\ndf = pd.DataFrame(data)\nprint(\"Original DataFrame:\")\nprint(df)\n\n# Fill missing values using the mean of neighboring rows\nfilled_df_mean = fill_missing_values(df, method='mean', window=2)\nprint(\"\\nFilled DataFrame (Mean):\")\nprint(filled_df_mean)\n\n# Fill missing values using the median of neighboring rows\nfilled_df_median = fill_missing_values(df, method='median', window=2)\nprint(\"\\nFilled DataFrame (Median):\")\nprint(filled_df_median)\n\n# Fill missing values using the mode of neighboring rows\nfilled_df_mode = fill_missing_values(df, method='mode', window=2)\nprint(\"\\nFilled DataFrame (Mode):\")\nprint(filled_df_mode)\n\n# Fill missing values using forward fill\nfilled_df_ffill = fill_missing_values(df, method='ffill')\nprint(\"\\nFilled DataFrame (Forward Fill):\")\nprint(filled_df_ffill)\n```\n\nIn this code, the `fill_missing_values` function takes a DataFrame (`df`) as input, along with optional parameters `method` and `window`. The `method` parameter specifies the method used to fill missing values, which can be 'mean', 'median', 'mode', or 'ffill' (forward fill). The `window` parameter determines the number of neighboring rows to consider when calculating the mean, median, or mode.\n\nThe function uses the `rolling` method from pandas to calculate the rolling mean, median, or mode of the DataFrame based on the specified window size. It then fills the missing values using the calculated values. If the `method` is set to 'ffill', it simply forward fills the missing values.\n\nThe example usage demonstrates how to use the `fill_missing_values` function with different methods and window sizes. It creates a sample DataFrame with missing values and applies the function to fill those missing values based on the neighboring rows."
}